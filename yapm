#!/bin/sh
set -eu
#set -x

# Inspired by https://www.xkcd.com/1654/
# and http://www.ocsmag.com/2016/04/16/universal-install-script-by-xkcd-combat-test/
# DO NOT USE OR RUN THIS!
# Unless you have read it and understand the risks
# You will be running untrusted code on your machine!
# You have been warned!

USAGE="Usage: $0 [-fn] [-s site] (search|install) package
-f  fuck it - run all executable programs in the root of the project directory
-n  dry run - download only, stop after cloning the project
-s  SITE    - set the site to search and install code from"
NAME="yapm" # used for creating config directories
DATA_HOME="${XDG_DATA_HOME:-${HOME?Error must be set}/.local/share}/$NAME"

BOOTSTRAP="$DATA_HOME/bootstrap"
TREE_DIR="$DATA_HOME/tree"
SITE_DIR="$DATA_HOME/github.com"
PATH="$TREE_DIR/bin:$TREE_DIR/usr/bin:$PATH" # so we can see things we've bootstrapped first

#Default Options
SITE="github.com"
FUCK_IT=0
DOWNLOAD_ONLY=0

# Debug Strings
CLONE_FLAGS="--depth 1"
CURL_FLAGS="-s" # useful to set to -v when debugging
github_api="https://api.github.com"

scd() { # safe cd - create directory then cd
    mkdir -p "$1"
    cd "$1"
}

check_for_programs() {
    for prog in curl cc make git awk jq;do
        if ! $prog --version &>/dev/null;then
            echo "$0: command not found $prog"
            exit 1
        fi
    done
}

git_sync() {
    if [ -d "$2/.git" ];then
        cd $2
        git pull
        cd ..
    else
        git clone "https://github.com/$1" $CLONE_FLAGS # cloning an untrusted git repo can lead to CVE-2015-7545 on some systems
    fi
}

#########################
# Github
#########################

github_search() {
    query=$(echo "$1" | tr ' ' '+')
    curl $CURL_FLAGS "$github_api/search/repositories?q=$query" | jq -rM '.items[] | .full_name + " - " + .description'
}

github_fetch() {
    if ! echo "$1" | grep -q '/';then      # only try to do the git install if the argument has a slash
        return
    fi
    repo_lang=$(curl $CURL_FLAGS "$github_api/repos/$1/languages" | jq 'keys_unsorted [0]' | tr -d \")
    if [ "$repo_lang" = "message" ];then
        echo "Error: Repository $1 not found!"
        return
    fi
    user_name=$(echo $1 | awk -F'/' '{print $1}') #TODO make more efficient here
    dir_name=$(echo $1 | awk -F'/' '{print $2}')
    scd "$SITE_DIR/$user_name"
    git_sync "$1" "$dir_name"
}
#########################

search() {
    case $SITE in
        "github.com")  github_search "$1"
            ;;
        *)  echo "$0: Site $SITE not supported."
            exit 1
            ;;
    esac
}

fetch() {
    case $SITE in
        "github.com") github_fetch "$1"
            ;;
        *)  echo "$0: Site $SITE not supported."
            exit 1
            ;;
    esac
}

build() {
    cd "$dir_name"
    # Use Cmake to install
    if [ -f CMakeLists.txt ];then
        scd build
        cmake -DCMAKE_INSTALL_PREFIX="$TREE_DIR" ..
        make
        make install
    else
        echo "Looks like $1 is written primarily in $repo_lang."
        case $repo_lang in
            "C")
                [ -f configure ] && ./configure --prefix="$TREE_DIR"
                make
                make install
                ;;
            "javascript")
                npm install .
                ;;
            "Rust")
                cargo build
                ;;
            *)  # First try an install script then we're gonna punt and run all
                # the executables in the directory followed by make.
                if [ -f install.sh ];then
                    #./install.sh
                    echo
                else
                    if [ $FUCK_IT -eq 1 ];then
                        # Oh what a beautiful footgun!
                        find . -maxdepth 1 -executable -type f -exec {} \;
                        make
                    fi
                fi
                ;;
        esac
    fi
}

bootstrap_autoconf() {
    cd "$BOOTSTRAP"
    curl 'ftp://ftp.gnu.org/gnu/autoconf/autoconf-latest.tar.gz' -o autoconf.tar.gz
    tar xzvf autoconf.tar.gz
    cd autoconf-*
    ./configure --prefix="$TREE_DIR"
    make
    make install
    cd ..
}

bootstrap_jq() {
    if [ -z "$(which autoreconf)" ];then # bootstraping dependency
        bootstrap_autoconf
    fi
    cd "$BOOTSTRAP"
    git clone https://github.com/stedolan/jq.git "$CLONE_FLAGS"
    cd jq
    autoreconf -i # TODO Figure out the best way to avoid this dependency
    ./configure --disable-maintainer-mode --prefix="$TREE_DIR"
    make 
    make install
    cd ..
}

main() {
    mkdir -p "$DATA_HOME"
    COMMAND=$1

    case $COMMAND in
        bootstrap)
            mkdir -p "$BOOTSTRAP"
            bootstrap_jq
            ;;
        search)
            search "$2"
            ;;
        install)
            mkdir -p "$TREE_DIR"
            fetch "$2"
            if [ "$DOWNLOAD_ONLY" -ne 1 ];then
                build "$2"
            fi
            ;;
        uninstall)
            echo uninstall not yet supported
            ;;
        *)
            echo "$USAGE"
            exit 1
            ;;
    esac
}

if [ "$(id -u)" = 0 ];then
    echo "$0 must be run as a non-root user!"
    exit 0
fi

# Command line option parsing
while getopts "ns:" opt; do
    case $opt in
        f)  FUCK_IT=1
            ;;
        s)  SITE="$OPTARG"
            echo $OPTARG
            ;;
        n)  DOWNLOAD_ONLY=1
            ;;
        \?)  
            echo "$0: Unknown option -$OPTARG"
            echo "$USAGE"
            exit 1
            ;;
    esac
done

# Remove Options from $@
args=""
prev=""
for arg in $@;do
    if ! [ ${arg:0:1} = "-" ] && ! [ "$prev" = "-s" ];then
        args="$args $arg"
    fi
    prev="$arg"
done
set -- $args # we dont want quotes here

check_for_programs
main "$@"
